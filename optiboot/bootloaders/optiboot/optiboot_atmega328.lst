
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ed  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000295  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037b  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e2  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000312  00000000  00000000  0000113e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    7e00:	01 c0       	rjmp	.+2      	; 0x7e04 <main>
    7e02:	e4 c0       	rjmp	.+456    	; 0x7fcc <do_spm>

00007e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e04:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) ||	\
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined (__AVR_ATmega128__)
  ch = MCUCSR;
#else
  ch = MCUSR;
    7e06:	84 b7       	in	r24, 0x34	; 52
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    7e08:	88 23       	and	r24, r24
    7e0a:	59 f0       	breq	.+22     	; 0x7e22 <main+0x1e>
    if (ch & _BV(WDRF)) {
    7e0c:	83 ff       	sbrs	r24, 3
    7e0e:	03 c0       	rjmp	.+6      	; 0x7e16 <main+0x12>
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) ||	\
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined(__AVR_ATmega128__)
      MCUCSR &= ~(_BV(PORF) | _BV(WDRF));
#else
      MCUSR &= ~(_BV(PORF) | _BV(WDRF));
    7e10:	94 b7       	in	r25, 0x34	; 52
    7e12:	96 7f       	andi	r25, 0xF6	; 246
    7e14:	94 bf       	out	0x34, r25	; 52
#endif
    }
    if (!(ch & _BV(PORF))) {
    7e16:	80 fd       	sbrc	r24, 0
    7e18:	04 c0       	rjmp	.+8      	; 0x7e22 <main+0x1e>
      /* 
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    7e1a:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    7e1c:	80 e0       	ldi	r24, 0x00	; 0
    7e1e:	c1 d0       	rcall	.+386    	; 0x7fa2 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    7e20:	ef c0       	rjmp	.+478    	; 0x8000 <optiboot_version+0x2>
    }
  }

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e22:	85 e0       	ldi	r24, 0x05	; 5
    7e24:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0); 
  LINDAT=0;
    #else
      #ifndef SINGLESPEED
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e28:	82 e0       	ldi	r24, 0x02	; 2
    7e2a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e2e:	88 e1       	ldi	r24, 0x18	; 24
    7e30:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e34:	86 e0       	ldi	r24, 0x06	; 6
    7e36:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)BAUD_SETTING;
    7e3a:	80 e1       	ldi	r24, 0x10	; 16
    7e3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    #endif // LIN_UART
  #endif // mega8/etc
#endif // soft_uart

  watchdogConfig(WATCHDOG_2S);
    7e40:	8f e0       	ldi	r24, 0x0F	; 15
    7e42:	af d0       	rcall	.+350    	; 0x7fa2 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e44:	25 9a       	sbi	0x04, 5	; 4
    7e46:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e48:	20 e3       	ldi	r18, 0x30	; 48
    7e4a:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7e4c:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e4e:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7e52:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7e56:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e58:	b0 9b       	sbis	0x16, 0	; 22
    7e5a:	fe cf       	rjmp	.-4      	; 0x7e58 <main+0x54>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e5c:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e5e:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    7e60:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e64:	47 fd       	sbrc	r20, 7
    7e66:	02 c0       	rjmp	.+4      	; 0x7e6c <main+0x68>
    7e68:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//	break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    7e6a:	89 f7       	brne	.-30     	; 0x7e4e <main+0x4a>
	     * and we needed the space back.
	     */
#ifdef FOURPAGEERASE
	    if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
	    __boot_page_erase_short(address.word);
    7e6c:	93 e0       	ldi	r25, 0x03	; 3
    7e6e:	e9 2e       	mov	r14, r25

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7e70:	dd 24       	eor	r13, r13
    7e72:	d3 94       	inc	r13
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    7e74:	25 e0       	ldi	r18, 0x05	; 5
    7e76:	c2 2e       	mov	r12, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    7e78:	31 e1       	ldi	r19, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e7a:	b3 2e       	mov	r11, r19

    if(ch == STK_GET_PARAMETER) {
    7e7c:	86 d0       	rcall	.+268    	; 0x7f8a <getch>
      unsigned char which = getch();
    7e7e:	81 34       	cpi	r24, 0x41	; 65
    7e80:	79 f4       	brne	.+30     	; 0x7ea0 <main+0x9c>
    7e82:	83 d0       	rcall	.+262    	; 0x7f8a <getch>
      verifySpace();
    7e84:	18 2f       	mov	r17, r24
    7e86:	93 d0       	rcall	.+294    	; 0x7fae <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    7e88:	12 38       	cpi	r17, 0x82	; 130
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x8c>
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
      putch(0x00);
    7e8c:	80 e0       	ldi	r24, 0x00	; 0
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
	  putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
	  putch(optiboot_version >> 8);
    7e8e:	04 c0       	rjmp	.+8      	; 0x7e98 <main+0x94>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
	  putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    7e90:	88 e0       	ldi	r24, 0x08	; 8
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e92:	11 38       	cpi	r17, 0x81	; 129
    7e94:	09 f0       	breq	.+2      	; 0x7e98 <main+0x94>
    7e96:	83 e0       	ldi	r24, 0x03	; 3
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
    7e98:	71 d0       	rcall	.+226    	; 0x7f7c <putch>
    7e9a:	80 e1       	ldi	r24, 0x10	; 16
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e9c:	6f d0       	rcall	.+222    	; 0x7f7c <putch>
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e9e:	ee cf       	rjmp	.-36     	; 0x7e7c <main+0x78>
    7ea0:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    7ea2:	19 f4       	brne	.+6      	; 0x7eaa <main+0xa6>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
    7ea4:	84 e1       	ldi	r24, 0x14	; 20
    7ea6:	8b d0       	rcall	.+278    	; 0x7fbe <getNch>
    }
    else if(ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7ea8:	f8 cf       	rjmp	.-16     	; 0x7e9a <main+0x96>
      // SET DEVICE EXT is ignored
      getNch(5);
    7eaa:	85 34       	cpi	r24, 0x45	; 69
    7eac:	11 f4       	brne	.+4      	; 0x7eb2 <main+0xae>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7eae:	85 e0       	ldi	r24, 0x05	; 5
      // LOAD ADDRESS
      address.bytes[0] = getch();
    7eb0:	fa cf       	rjmp	.-12     	; 0x7ea6 <main+0xa2>
    7eb2:	85 35       	cpi	r24, 0x55	; 85
    7eb4:	41 f4       	brne	.+16     	; 0x7ec6 <main+0xc2>
      address.bytes[1] = getch();
    7eb6:	69 d0       	rcall	.+210    	; 0x7f8a <getch>
    7eb8:	c8 2f       	mov	r28, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    7eba:	67 d0       	rcall	.+206    	; 0x7f8a <getch>
    7ebc:	d8 2f       	mov	r29, r24
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7ebe:	cc 0f       	add	r28, r28
      }
#endif
      address.word *= 2; // Convert from word address to byte address
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7ec0:	dd 1f       	adc	r29, r29
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    7ec2:	75 d0       	rcall	.+234    	; 0x7fae <verifySpace>
    7ec4:	ea cf       	rjmp	.-44     	; 0x7e9a <main+0x96>
    7ec6:	86 35       	cpi	r24, 0x56	; 86
    7ec8:	19 f4       	brne	.+6      	; 0x7ed0 <main+0xcc>
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7eca:	84 e0       	ldi	r24, 0x04	; 4
    7ecc:	78 d0       	rcall	.+240    	; 0x7fbe <getNch>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ece:	de cf       	rjmp	.-68     	; 0x7e8c <main+0x88>
    7ed0:	84 36       	cpi	r24, 0x64	; 100
    7ed2:	09 f0       	breq	.+2      	; 0x7ed6 <main+0xd2>
    7ed4:	34 c0       	rjmp	.+104    	; 0x7f3e <main+0x13a>
    7ed6:	59 d0       	rcall	.+178    	; 0x7f8a <getch>
      savelength = length;
      desttype = getch();
    7ed8:	58 d0       	rcall	.+176    	; 0x7f8a <getch>
    7eda:	f8 2e       	mov	r15, r24

      // read a page worth of contents
      bufPtr = buff.bptr;
    7edc:	56 d0       	rcall	.+172    	; 0x7f8a <getch>
    7ede:	a8 2e       	mov	r10, r24
      do *bufPtr++ = getch();
    7ee0:	00 e0       	ldi	r16, 0x00	; 0
    7ee2:	11 e0       	ldi	r17, 0x01	; 1
    7ee4:	48 01       	movw	r8, r16
    7ee6:	8f ef       	ldi	r24, 0xFF	; 255
    7ee8:	88 1a       	sub	r8, r24
    7eea:	98 0a       	sbc	r9, r24
    7eec:	4e d0       	rcall	.+156    	; 0x7f8a <getch>
    7eee:	f8 01       	movw	r30, r16
    7ef0:	80 83       	st	Z, r24
      while (--length);
    7ef2:	84 01       	movw	r16, r8
    7ef4:	f8 10       	cpse	r15, r8

      // Read command terminator, start reply
      verifySpace();
    7ef6:	f6 cf       	rjmp	.-20     	; 0x7ee4 <main+0xe0>
    7ef8:	5a d0       	rcall	.+180    	; 0x7fae <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
			       addr16_t address, pagelen_t len)
{
    switch (memtype) {
    7efa:	f5 e4       	ldi	r31, 0x45	; 69
    7efc:	af 12       	cpse	r10, r31
    7efe:	01 c0       	rjmp	.+2      	; 0x7f02 <main+0xfe>
    7f00:	ff cf       	rjmp	.-2      	; 0x7f00 <main+0xfc>
	     * and we needed the space back.
	     */
#ifdef FOURPAGEERASE
	    if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
	    __boot_page_erase_short(address.word);
    7f02:	fe 01       	movw	r30, r28
    7f04:	e7 be       	out	0x37, r14	; 55
    7f06:	e8 95       	spm
	    boot_spm_busy_wait();
    7f08:	07 b6       	in	r0, 0x37	; 55
    7f0a:	00 fc       	sbrc	r0, 0
    7f0c:	fd cf       	rjmp	.-6      	; 0x7f08 <main+0x104>
	 * the default rather than checking for the correct code, we save
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint16_t addrPtr = address.word;
    7f0e:	fe 01       	movw	r30, r28
	     */
#ifdef FOURPAGEERASE
	    if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
	    __boot_page_erase_short(address.word);
	    boot_spm_busy_wait();
    7f10:	a0 e0       	ldi	r26, 0x00	; 0
    7f12:	b1 e0       	ldi	r27, 0x01	; 1

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7f14:	cd 01       	movw	r24, r26
    7f16:	02 96       	adiw	r24, 0x02	; 2
    7f18:	2d 91       	ld	r18, X+
    7f1a:	3c 91       	ld	r19, X
    7f1c:	09 01       	movw	r0, r18
    7f1e:	d7 be       	out	0x37, r13	; 55
    7f20:	e8 95       	spm
		addrPtr += 2;
    7f22:	11 24       	eor	r1, r1
	    } while (len -= 2);
    7f24:	32 96       	adiw	r30, 0x02	; 2

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    7f26:	dc 01       	movw	r26, r24
    7f28:	f8 12       	cpse	r15, r24
    7f2a:	f4 cf       	rjmp	.-24     	; 0x7f14 <main+0x110>
	    boot_spm_busy_wait();
    7f2c:	fe 01       	movw	r30, r28
    7f2e:	c7 be       	out	0x37, r12	; 55
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    7f30:	e8 95       	spm
    7f32:	07 b6       	in	r0, 0x37	; 55
    7f34:	00 fc       	sbrc	r0, 0
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f36:	fd cf       	rjmp	.-6      	; 0x7f32 <main+0x12e>
      uint8_t desttype;
      GETLENGTH(length);
    7f38:	b7 be       	out	0x37, r11	; 55
    7f3a:	e8 95       	spm
    7f3c:	ae cf       	rjmp	.-164    	; 0x7e9a <main+0x96>

      desttype = getch();
    7f3e:	84 37       	cpi	r24, 0x74	; 116
    7f40:	71 f4       	brne	.+28     	; 0x7f5e <main+0x15a>

      verifySpace();
    7f42:	23 d0       	rcall	.+70     	; 0x7f8a <getch>
    7f44:	22 d0       	rcall	.+68     	; 0x7f8a <getch>
    7f46:	f8 2e       	mov	r15, r24
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7f48:	20 d0       	rcall	.+64     	; 0x7f8a <getch>
    7f4a:	31 d0       	rcall	.+98     	; 0x7fae <verifySpace>
#endif
	    putch(ch);
    7f4c:	8e 01       	movw	r16, r28
    7f4e:	f8 01       	movw	r30, r16
	} while (--length);
    7f50:	85 91       	lpm	r24, Z+
    7f52:	8f 01       	movw	r16, r30
    7f54:	13 d0       	rcall	.+38     	; 0x7f7c <putch>
    7f56:	fa 94       	dec	r15

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f58:	f1 10       	cpse	r15, r1
    7f5a:	f9 cf       	rjmp	.-14     	; 0x7f4e <main+0x14a>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f5c:	9e cf       	rjmp	.-196    	; 0x7e9a <main+0x96>
    7f5e:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    7f60:	39 f4       	brne	.+14     	; 0x7f70 <main+0x16c>
    7f62:	25 d0       	rcall	.+74     	; 0x7fae <verifySpace>
    7f64:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    7f66:	0a d0       	rcall	.+20     	; 0x7f7c <putch>
    7f68:	85 e9       	ldi	r24, 0x95	; 149
    7f6a:	08 d0       	rcall	.+16     	; 0x7f7c <putch>
      putch(SIGNATURE_2);
    7f6c:	8f e0       	ldi	r24, 0x0F	; 15
    7f6e:	94 cf       	rjmp	.-216    	; 0x7e98 <main+0x94>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f70:	81 35       	cpi	r24, 0x51	; 81
    7f72:	09 f0       	breq	.+2      	; 0x7f76 <main+0x172>
    7f74:	a6 cf       	rjmp	.-180    	; 0x7ec2 <main+0xbe>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f76:	88 e0       	ldi	r24, 0x08	; 8
    7f78:	14 d0       	rcall	.+40     	; 0x7fa2 <watchdogConfig>
    7f7a:	a3 cf       	rjmp	.-186    	; 0x7ec2 <main+0xbe>

00007f7c <putch>:
    7f7c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
}

void putch(char ch) {
#ifndef SOFT_UART
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    7f80:	95 ff       	sbrs	r25, 5
    7f82:	fc cf       	rjmp	.-8      	; 0x7f7c <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    7f84:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f88:	08 95       	ret

00007f8a <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7f8a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f8e:	87 ff       	sbrs	r24, 7
    7f90:	fc cf       	rjmp	.-8      	; 0x7f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7f92:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f96:	84 fd       	sbrc	r24, 4
    7f98:	01 c0       	rjmp	.+2      	; 0x7f9c <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f9a:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fa0:	08 95       	ret

00007fa2 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fa2:	e0 e6       	ldi	r30, 0x60	; 96
    7fa4:	f0 e0       	ldi	r31, 0x00	; 0
    7fa6:	98 e1       	ldi	r25, 0x18	; 24
    7fa8:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    7faa:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
    7fac:	08 95       	ret

00007fae <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fae:	ed df       	rcall	.-38     	; 0x7f8a <getch>
    7fb0:	80 32       	cpi	r24, 0x20	; 32
    7fb2:	19 f0       	breq	.+6      	; 0x7fba <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fb4:	88 e0       	ldi	r24, 0x08	; 8
    7fb6:	f5 df       	rcall	.-22     	; 0x7fa2 <watchdogConfig>
    7fb8:	ff cf       	rjmp	.-2      	; 0x7fb8 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fba:	84 e1       	ldi	r24, 0x14	; 20
    7fbc:	df cf       	rjmp	.-66     	; 0x7f7c <putch>

00007fbe <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fbe:	cf 93       	push	r28
    7fc0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fc2:	e3 df       	rcall	.-58     	; 0x7f8a <getch>
    7fc4:	c1 50       	subi	r28, 0x01	; 1
    7fc6:	e9 f7       	brne	.-6      	; 0x7fc2 <getNch+0x4>
  verifySpace();
}
    7fc8:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fca:	f1 cf       	rjmp	.-30     	; 0x7fae <verifySpace>

00007fcc <do_spm>:
    7fcc:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    7fce:	0a 01       	movw	r0, r20
    7fd0:	67 bf       	out	0x37, r22	; 55
    7fd2:	e8 95       	spm
    7fd4:	11 24       	eor	r1, r1
    7fd6:	07 b6       	in	r0, 0x37	; 55
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    7fd8:	00 fc       	sbrc	r0, 0
    7fda:	fd cf       	rjmp	.-6      	; 0x7fd6 <do_spm+0xa>
    7fdc:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7fde:	29 f0       	breq	.+10     	; 0x7fea <do_spm+0x1e>
    7fe0:	45 2b       	or	r20, r21
    7fe2:	19 f4       	brne	.+6      	; 0x7fea <do_spm+0x1e>
    7fe4:	81 e1       	ldi	r24, 0x11	; 17
      // Reenable read access to flash
      __boot_rww_enable_short();
    7fe6:	87 bf       	out	0x37, r24	; 55
    7fe8:	e8 95       	spm
    7fea:	08 95       	ret
